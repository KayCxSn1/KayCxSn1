<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firewall Configuration with iptables</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #121212;
            color: #ffffff;
            padding: 20px;
        }
        h1, h2 {
            color: #1e90ff;
        }
        a {
            color: #1e90ff;
        }
        a:hover {
            color: #ff6347;
        }
        header, footer {
            background-color: #1a1a1a;
            color: #ffffff;
            padding: 10px;
        }
        section {
            margin-bottom: 40px;
        }
        ol {
            list-style-type: decimal;
            margin-left: 20px;
        }
        li {
            margin-bottom: 15px;
        }
        ul {
            list-style-type: disc;
            margin-left: 20px;
        }
    </style>
</head>
<body>
    <header>
        <h1>Firewall Configuration with iptables</h1>
    </header>

    <section>
        <h2>Overview</h2>
        <p>This project focused on configuring a Linux-based firewall using iptables. The objective was to secure a server by establishing rules that filter incoming and outgoing network traffic. By controlling access to specific services, this configuration prevents unauthorized access and limits the potential for attacks.</p>
    </section>

    <section>
        <h2>Step-by-Step Process</h2>
        <ol>
            <li>
                <strong>Setting Up the Environment:</strong>
                <p>To begin, I deployed a Linux virtual machine (VM) running Ubuntu as the firewall server. This VM was configured with iptables, a powerful utility used to create firewall rules on Linux-based systems. Using iptables provided granular control over packet filtering and traffic flow to and from the server.</p>
            </li>

            <li>
                <strong>Installing iptables:</strong>
                <p>Although most Linux distributions come with iptables pre-installed, I verified its presence by running the command:</p>
                <code>sudo apt-get install iptables</code>
                <p>This ensured the firewall rules could be applied without issues and that the latest version of iptables was in place.</p>
            </li>

            <li>
                <strong>Configuring Default Policies:</strong>
                <p>I began the firewall configuration by setting default policies for each chain (INPUT, OUTPUT, FORWARD). The default policy for incoming traffic was set to <code>DROP</code> to block all connections by default, except for those explicitly allowed:</p>
                <code>sudo iptables -P INPUT DROP</code><br>
                <code>sudo iptables -P OUTPUT ACCEPT</code><br>
                <code>sudo iptables -P FORWARD DROP</code>
                <p>This restricted all incoming and forwarding traffic, while allowing outgoing connections from the server.</p>
            </li>

            <li>
                <strong>Allowing SSH Access:</strong>
                <p>To enable remote management, I configured a rule to permit SSH connections (port 22) only from specific IP addresses. This was crucial for securing access, as it limited SSH access to known, trusted IPs. The command below opened SSH connections for a trusted IP:</p>
                <code>sudo iptables -A INPUT -p tcp -s <em>trusted_ip</em> --dport 22 -j ACCEPT</code>
                <p>This rule allowed only the specified IP to connect over SSH, reducing the risk of unauthorized access.</p>
            </li>

            <li>
                <strong>Enabling Web Server Access:</strong>
                <p>Since the server hosted a web application, I added rules to allow HTTP (port 80) and HTTPS (port 443) traffic. These rules were critical to ensure the web application was accessible to legitimate users while protecting other ports:</p>
                <code>sudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT</code><br>
                <code>sudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT</code>
                <p>This allowed traffic for both unencrypted (HTTP) and encrypted (HTTPS) web connections.</p>
            </li>

            <li>
                <strong>Blocking ICMP (Ping) Requests:</strong>
                <p>For security purposes, I chose to block ICMP echo requests (ping) to prevent potential network mapping by attackers. Using iptables, I added a rule to drop incoming ICMP echo requests:</p>
                <code>sudo iptables -A INPUT -p icmp --icmp-type 8 -j DROP</code>
                <p>This ensured that the server would not respond to ping requests, making it less visible to network scans.</p>
            </li>

            <li>
                <strong>Saving the iptables Configuration:</strong>
                <p>After all rules were configured and tested, I saved the iptables configuration to ensure it persisted after a reboot. This was achieved using:</p>
                <code>sudo iptables-save &gt; /etc/iptables/rules.v4</code>
                <p>This command saved the current iptables rules in a file, ensuring they would automatically load on system startup.</p>
            </li>

            <li>
                <strong>Testing the Firewall:</strong>
                <p>Finally, I tested the firewall configuration to verify the rules were functioning as intended. Using tools like Nmap, I scanned the server from both trusted and untrusted IP addresses to ensure only permitted services were accessible. For instance, I tested SSH access from the trusted IP, confirming it was allowed, while attempts from other IPs were blocked.</p>
                <p>These tests validated that the firewall rules effectively restricted access to authorized users and services, demonstrating the successful setup of a secure firewall.</p>
            </li>
        </ol>
    </section>

    <section>
        <h2>Tools Used</h2>
        <ul>
            <li><strong>iptables:</strong> Configured as the primary firewall tool for filtering traffic.</li>
            <li><strong>Nmap:</strong> Used for network scanning and verifying firewall rule effectiveness.</li>
            <li><strong>Linux VM:</strong> Ubuntu server used as the firewall environment.</li>
        </ul>
    </section>

    <section>
        <h2>Result</h2>
        <p>The configured firewall successfully controlled traffic to and from the server, allowing only essential services while blocking unauthorized access. By defining specific rules for SSH, HTTP, and HTTPS, and restricting other ports, I ensured that the server was protected against unauthorized access and unnecessary exposure.</p>
    </section>

    <footer>
        <h2>Contact Information</h2>
        <ul>
            <li><strong>Email:</strong> <a href="mailto:your.email@example.com">your.email@example.com</a></li>
            <li><strong>LinkedIn:</strong> <a href="https://www.linkedin.com/in/yourprofile" target="_blank">linkedin.com/in/yourprofile</a></li>
            <li><strong>GitHub:</strong> <a href="https://github.com/yourusername" target="_blank">github.com/yourusername</a></li>
        </ul>
    </footer>
</body>
</html>
