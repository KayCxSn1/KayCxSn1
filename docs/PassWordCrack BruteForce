<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Cracking & Brute-Force Simulation</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #121212;
            color: #ffffff;
            padding: 20px;
        }
        h1, h2 {
            color: #1e90ff;
        }
        a {
            color: #1e90ff;
        }
        a:hover {
            color: #ff6347;
        }
        header, footer {
            background-color: #1a1a1a;
            color: #ffffff;
            padding: 10px;
        }
        section {
            margin-bottom: 40px;
        }
        ol {
            list-style-type: decimal;
            margin-left: 20px;
        }
        li {
            margin-bottom: 15px;
        }
        ul {
            list-style-type: disc;
            margin-left: 20px;
        }
    </style>
</head>
<body>
    <header>
        <h1>Password Cracking & Brute-Force Simulation</h1>
    </header>

    <section>
        <h2>Overview</h2>
        <p>This project involved simulating password cracking using brute-force and dictionary attacks to demonstrate vulnerabilities associated with weak passwords. Using tools like John the Ripper and Hashcat, I conducted password security tests to compare the effectiveness of brute-force vs. dictionary attacks on password hashes.</p>
    </section>

    <section>
        <h2>Step-by-Step Process</h2>
        <ol>
            <li>
                <strong>Setting Up the Password Hashes:</strong>
                <p>First, I created a file containing password hashes to simulate a real-world password cracking scenario. The hashes were generated using common hashing algorithms like MD5 and SHA-256 to replicate the hashing mechanisms of many applications and systems:</p>
                <code>echo -n "password123" | md5sum</code><br>
                <code>echo -n "strongpassword" | sha256sum</code>
                <p>These commands created MD5 and SHA-256 hashes of "password123" and "strongpassword", which were added to a file named <code>hashes.txt</code> for testing purposes.</p>
            </li>

            <li>
                <strong>Using John the Ripper for Brute-Force Cracking:</strong>
                <p>I began testing brute-force attacks using John the Ripper. By running the tool on the <code>hashes.txt</code> file, I simulated an exhaustive attempt to break each hash by trying all possible combinations:</p>
                <code>john --format=raw-md5 hashes.txt</code>
                <p>This command directed John the Ripper to try every possible password combination until it matched the hash in <code>hashes.txt</code>. Since this approach is time-consuming, it demonstrated how weak passwords like "password123" are cracked faster than stronger ones.</p>
            </li>

            <li>
                <strong>Using a Dictionary Attack with John the Ripper:</strong>
                <p>Next, I tested a dictionary attack, which is more efficient when the password is weak or common. I used a sample dictionary file containing commonly used passwords:</p>
                <code>john --wordlist=dictionary.txt --format=raw-md5 hashes.txt</code>
                <p>This command instructed John to attempt each word in <code>dictionary.txt</code> against the hash. The dictionary attack successfully cracked "password123" quickly, illustrating the vulnerability of common passwords.</p>
            </li>

            <li>
                <strong>Using Hashcat for High-Speed Cracking:</strong>
                <p>To explore GPU-accelerated cracking, I used Hashcat, known for its speed, especially with complex hashing algorithms. Using Hashcat, I targeted SHA-256 hashes, which are computationally stronger than MD5:</p>
                <code>hashcat -m 1400 -a 0 hashes.txt dictionary.txt</code>
                <p>Here, <code>-m 1400</code> specifies SHA-256, while <code>-a 0</code> sets the attack mode to dictionary. Hashcat attempted to match each password hash in <code>hashes.txt</code> with entries in <code>dictionary.txt</code>. By leveraging the GPU, Hashcat performed significantly faster than CPU-only tools.</p>
            </li>

            <li>
                <strong>Comparing Attack Speeds and Success Rates:</strong>
                <p>Finally, I compared the time taken by brute-force and dictionary attacks on weak and strong passwords. Brute-force took significantly longer for complex passwords, while dictionary attacks quickly identified weak passwords. Hashcat's GPU-acceleration provided an advantage in cracking strong hashes like SHA-256, highlighting the importance of complex, unique passwords.</p>
            </li>
        </ol>
    </section>

    <section>
        <h2>Tools Used</h2>
        <ul>
            <li><strong>John the Ripper:</strong> Used for brute-force and dictionary-based password cracking on CPU.</li>
            <li><strong>Hashcat:</strong> Employed for high-speed cracking on SHA-256 hashes using GPU acceleration.</li>
            <li><strong>Linux Commands:</strong> Used to generate password hashes (MD5, SHA-256) for testing purposes.</li>
        </ul>
    </section>

    <section>
        <h2>Result</h2>
        <p>The lab demonstrated how weak passwords are susceptible to dictionary and brute-force attacks, especially when hashed with MD5. Hashcatâ€™s performance on SHA-256 illustrated the power of GPU acceleration for complex password cracking. This exercise reinforced the importance of strong, unique passwords and modern hashing techniques for password security.</p>
    </section>

    <footer>
        <h2>Contact Information</h2>
        <ul>
            <li><strong>Email:</strong> <a href="mailto:your.email@example.com">your.email@example.com</a></li>
            <li><strong>LinkedIn:</strong> <a href="https://www.linkedin.com/in/yourprofile" target="_blank">linkedin.com/in/yourprofile</a></li>
            <li><strong>GitHub:</strong> <a href="https://github.com/yourusername" target="_blank">github.com/yourusername</a></li>
        </ul>
    </footer>
</body>
</html>
