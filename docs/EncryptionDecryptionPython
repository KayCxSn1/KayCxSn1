<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Encryption & Decryption with Python</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #121212;
            color: #ffffff;
            padding: 20px;
        }
        h1, h2 {
            color: #1e90ff;
        }
        a {
            color: #1e90ff;
        }
        a:hover {
            color: #ff6347;
        }
        header, footer {
            background-color: #1a1a1a;
            color: #ffffff;
            padding: 10px;
        }
        section {
            margin-bottom: 40px;
        }
        ol {
            list-style-type: decimal;
            margin-left: 20px;
        }
        li {
            margin-bottom: 15px;
        }
        ul {
            list-style-type: disc;
            margin-left: 20px;
        }
    </style>
</head>
<body>
    <header>
        <h1>Encryption & Decryption with Python</h1>
    </header>

    <section>
        <h2>Overview</h2>
        <p>This project involved implementing file encryption and decryption using Python and the PyCryptodome library, demonstrating fundamental cryptographic concepts like symmetric encryption. The lab aimed to secure sensitive data by encrypting it using the AES algorithm and decrypting it only when necessary.</p>
    </section>

    <section>
        <h2>Step-by-Step Process</h2>
        <ol>
            <li>
                <strong>Setting Up the Environment:</strong>
                <p>I began by installing the PyCryptodome library, which provides the necessary cryptographic functions for AES encryption:</p>
                <code>pip install pycryptodome</code>
                <p>This library supports AES and other modern algorithms, essential for secure encryption and decryption tasks.</p>
            </li>

            <li>
                <strong>Generating an Encryption Key:</strong>
                <p>Using AES requires a secure encryption key. I generated a 256-bit (32-byte) key to ensure a strong encryption standard. The key can be randomly generated and saved securely for later decryption:</p>
                <code>from Crypto.Random import get_random_bytes</code><br>
                <code>key = get_random_bytes(32)</code>
                <p>The <code>get_random_bytes</code> function ensures the key is sufficiently random, adding a layer of protection against brute-force attacks.</p>
            </li>

            <li>
                <strong>Encrypting the File:</strong>
                <p>With the key ready, I moved on to encrypting a test file using AES in GCM (Galois/Counter Mode) mode, which provides both confidentiality and integrity:</p>
                <code>from Crypto.Cipher import AES</code><br>
                <code>cipher = AES.new(key, AES.MODE_GCM)</code>
                <p>Here, the cipher object is created with AES in GCM mode. GCM not only encrypts but also generates an authentication tag, which verifies the file hasn’t been tampered with. I then read the file content and encrypted it:</p>
                <code>ciphertext, tag = cipher.encrypt_and_digest(file_data)</code>
                <p>The encrypted data (<code>ciphertext</code>) and the tag were saved, as both are required for successful decryption.</p>
            </li>

            <li>
                <strong>Saving Encrypted Data:</strong>
                <p>Next, I saved the encrypted data and related elements (ciphertext, tag, nonce) to a new file. This is critical because GCM mode requires the nonce to decrypt the file later:</p>
                <code>with open("encrypted_file.bin", "wb") as f:</code><br>
                <code>f.write(cipher.nonce)</code><br>
                <code>f.write(tag)</code><br>
                <code>f.write(ciphertext)</code>
                <p>Storing the nonce and tag along with the ciphertext allows for reliable decryption, making sure the data can be retrieved securely and accurately.</p>
            </li>

            <li>
                <strong>Decrypting the File:</strong>
                <p>To decrypt, I first read the nonce, tag, and ciphertext from the encrypted file. Then, I recreated the cipher object with the same key and nonce to restore the original data:</p>
                <code>cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)</code>
                <p>I then attempted to decrypt the ciphertext, verifying its integrity with the stored tag:</p>
                <code>plaintext = cipher.decrypt_and_verify(ciphertext, tag)</code>
                <p>If the tag didn’t match, an error would be raised, indicating possible tampering. This ensures that any data alteration can be detected during decryption.</p>
            </li>

            <li>
                <strong>Testing and Verifying Decryption:</strong>
                <p>Finally, I compared the decrypted data with the original file to ensure they matched. This confirmed that the encryption and decryption process worked correctly, and the file could be securely encrypted and decrypted using the AES key and GCM mode.</p>
            </li>
        </ol>
    </section>

    <section>
        <h2>Tools Used</h2>
        <ul>
            <li><strong>PyCryptodome:</strong> Python library used to handle cryptographic operations, particularly AES encryption in this lab.</li>
            <li><strong>Python Programming:</strong> Utilized to write the script that handled encryption, decryption, and file management.</li>
        </ul>
    </section>

    <section>
        <h2>Result</h2>
        <p>This lab illustrated the process of securely encrypting and decrypting files using the AES algorithm in Python. It underscored the importance of encryption for data confidentiality and the necessity of using secure algorithms like AES. The exercise emphasized the role of proper key and data management for secure cryptographic applications.</p>
    </section>

    <footer>
        <h2>Contact Information</h2>
        <ul>
            <li><strong>Email:</strong> <a href="mailto:your.email@example.com">your.email@example.com</a></li>
            <li><strong>LinkedIn:</strong> <a href="https://www.linkedin.com/in/yourprofile" target="_blank">linkedin.com/in/yourprofile</a></li>
            <li><strong>GitHub:</strong> <a href="https://github.com/yourusername" target="_blank">github.com/yourusername</a></li>
        </ul>
    </footer>
</body>
</html>
